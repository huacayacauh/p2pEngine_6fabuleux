/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SearchParser.jj */
/*@egen*/

options
{
  static = false;
}

PARSER_BEGIN(SearchParser)
package model.network.search.parser;
import java.io.InputStream;

public class SearchParser/*@bgen(jjtree)*/implements SearchParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTSearchParserState jjtree = new JJTSearchParserState();

/*@egen*/
  public boolean checkRequest(InputStream request) throws ParseException
  {   
    SearchParser parser = new SearchParser(request);


    
	SimpleNode search;
    System.out.println("Parser Invocated");
    try
      {
        search = Recherche();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
		return false;
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        return false;
      }
      search.dump("");
      return search != null;
    
  }
}

PARSER_END(SearchParser)

SKIP :
{
  " "
|   "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
 < AND : "AND" >
| < OR : "OR" >
| < LEFTPARENTHESIS : "(" >
| < RIGHTPARENTHESIS : ")" >
}

TOKEN :
{
 < WORD_TOKEN : (["a"-"z"] | ["A"-"Z"])+ > |
    < NUMBER_TOKEN : (["0"-"9"])+ >
}

SimpleNode Recherche()  :{/*@bgen(jjtree) Recherche */
  SimpleNode jjtn000 = new SimpleNode(JJTRECHERCHE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Recherche */
        try {
/*@egen*/
  	(Expression())*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
  	{
  	  return jjtn000;
 	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

  
}

void Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  < WORD_TOKEN > (ExpressionBis())
| LEFTPARENTHESIS() Expression() RIGHTPARENTHESIS() (ExpressionBis())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/   	 
  
}

void ExpressionBis() :
{/*@bgen(jjtree) ExpressionBis */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONBIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ExpressionBis */
  try {
/*@egen*/
  (Operateur() Expression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Operateur() :
{/*@bgen(jjtree) Operateur */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATEUR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Operateur */
  try {
/*@egen*/
  AND()
| OR()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AND():
{/*@bgen(jjtree) AND */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) AND */
  try {
/*@egen*/
  < AND >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OR():
{/*@bgen(jjtree) OR */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) OR */
  try {
/*@egen*/
  < OR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LEFTPARENTHESIS():
{/*@bgen(jjtree) LEFTPARENTHESIS */
  SimpleNode jjtn000 = new SimpleNode(JJTLEFTPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) LEFTPARENTHESIS */
  try {
/*@egen*/
  < LEFTPARENTHESIS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RIGHTPARENTHESIS():
{/*@bgen(jjtree) RIGHTPARENTHESIS */
  SimpleNode jjtn000 = new SimpleNode(JJTRIGHTPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) RIGHTPARENTHESIS */
  try {
/*@egen*/
  < RIGHTPARENTHESIS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
